//Hyun Suk Ryoo
//hr2ee
//10/15/17
//wordPuzzle.cpp
//The big theta run time is n^4 because of the quad nested for loop in the main method
//The running time for the program for words.txt and 300x300.grid.txt was 7874 seconds...
#include <iostream>
#include "hashTable.h"
#include "timer.h"
#include <fstream>
#include <string>
#include <stdlib.h>

using namespace std;
#define MAXROWS 500
#define MAXCOLS 500

char grid[MAXROWS][MAXCOLS];

// Forward declarations                                                                  
bool readInGrid (string filename, int &rows, int &cols);
char* getWordInGrid (int startRow, int startCol, int dir, int len,
                     int numRows, int numCols);

int main(int arc, char* argv[]) {
  int lines = 0;
  string name = argv[1];
  ifstream file(name.c_str());
  string s;
  //cout << argv[1] << endl;
  while(getline(file, s)) {
    lines++;
  }
  hashTable table(lines);
  file.clear();
  //cout << lines << endl;
  file.seekg(0, ios::beg);
  while(getline(file, s)) {
    //cout << s << endl;
    if ( s.size() > 2) {
      //cout << s << endl;
      table.insert(s);
    }
    //cout << table.find(s) << endl;
  }
   // to hold the number of rows and cols in the input file
  int rows, cols;
  // attempt to read in the file
  bool result = readInGrid (argv[2], rows, cols);
  // if there is an error, report it
  if ( !result ) {
    cout << "Error reading file" <<endl;
    exit(1); // requires the <stdlib.h> #include header!
  }
  // Get a word (of length 10), starting at position (2,2) in the
  // array, in each of the 8 directions
  //cout << endl;
  //for ( int i = 0; i < 8; i++ )
  //cout << i << ": " << getWordInGrid(2,2,i,10,rows,cols) << endl;
  // All done
  int wordsfound = 0;
  timer t;
  t.start();
  string di;
  //table.insert("hello");
  //cout << table.find("hello") << endl;
  for ( int r = 0; r < rows; r++) {
    for ( int c = 0; c < cols; c++) {
      for (int d = 0; d < 8; d++) {
	for (int l = 3; l < 22; l++) {
	  string s = getWordInGrid(r,c,d,l,rows,cols) ;
	  //cout << s << endl;
	    if (table.find(s)) {
	      //cout << "found" << endl;
	      //cout << s << endl;
	      //wordsfound++;
	      if(d==0) {
		di = "N ";
	      }
	      else if (d == 1) {
		di = "NE";
	      }
	      else if (d==2) {
		di = "E ";
	      }
	      else if (d==3) {
		di = "SE";
	      }
	      else if (d==4) {
		di = "S ";
	      }
	      else if(d==5) {
		di = "SW";
	      }
	      else if(d==6) {
		di = "W ";
	      }
	      else if (d==7) {
		di = "NW";
	      }
	      if ( s.size() == l) {
		cout << di << "(" << r << "," << c << ")" << ":" << "	 " << s <<endl;
		wordsfound++;
	    }
	    } 
	    //cout << di << "(" << r << "," << c << ")" << ":" << "                " << s << endl;
	}
      }
      // cout << di << "(" << r << "," << c << ")" << ":" <<"                " << s<< endl;
    }
  }
  t.stop();
  //int z = 1000 * t.getTime();
  
  cout << wordsfound << " words found" << endl;  
  cout << "Found all words in " << t << "seconds" << endl;
}

bool readInGrid (string filename, int &rows, int &cols) {
  // a C++ string to hold the line of data that is read in
  string line;
  // set up the file stream to read in the file (takes in a C-style
  // char* string, not a C++ string object)
  ifstream file(filename.c_str());
  // upon an error, return false
  if ( !file.is_open() )
    return false;
  // the first line is the number of rows: read it in
  file >> rows;
  //cout << "There are " << rows << " rows." << endl;
  getline (file,line); // eats up the return at the end of the line
  // the second line is the number of cols: read it in and parse it
  file >> cols;
  //cout << "There are " << cols << " cols." << endl;
  getline (file,line); // eats up the return at the end of the line
  // the third and last line is the data: read it in
  getline (file,line);
  // close the file
  file.close();
  // convert the string read in to the 2-D grid format into the
  // grid[][] array.  In the process, we'll print the grid to the
  // screen as well.
  int pos = 0; // the current position in the input data
  for ( int r = 0; r < rows; r++ ) {
    for ( int c = 0; c < cols; c++ ) {
      grid[r][c] = line[pos++];
      //cout << grid[r][c];
    }
    //cout << endl;
  }
  // return success!
  return true;
}

char* getWordInGrid (int startRow, int startCol, int dir, int len,
                     int numRows, int numCols) {
  // the static-ness of this variable prevents it from being
  // re-declared upon each function invocataion.  It also prevents it
  // from being deallocated between invocations.  It's probably not
  // good programming practice, but it's an efficient means to return
  // a value.
  static char output[256];
  // make sure the length is not greater than the array size.
  if ( len >= 255 )
    len = 255;
  // the position in the output array, the current row, and the
  // current column
  int pos = 0, r = startRow, c = startCol;
  // iterate once for each character in the output
  for ( int i = 0; i < len; i++ ) {
    // if the current row or column is out of bounds, then break
    if ( (c >= numCols) || (r >= numRows) || (r < 0) || (c < 0) )
      break;
    // set the next character in the output array to the next letter
    // in the grid
    output[pos++] = grid[r][c];
    // move in the direction specified by the parameter
    switch (dir) { // assumes grid[0][0] is in the upper-left
    case 0:
      r--;
      break; // north
    case 1:
      r--;
      c++;
      break; // north-east
    case 2:
      c++;
      break; // east
    case 3:
      r++;
      c++;
      break; // south-east
    case 4:
      r++;
      break; // south
    case 5:
      r++;
      c--;
      break; // south-west
    case 6:
      c--;
      break; // west
    case 7:
      r--;
      c--;
      break; // north-west
    }
  }
  // set the next character to zero (end-of-string)
  output[pos] = 0;
  // return the string (a C-style char* string, not a C++ string
  // object)
  return output;
}
